#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back-tfg:server');
var server = require('http').Server(app);
const io = require('socket.io')(server)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);


app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "*")
  next();
});
/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

io.on('connection', socket => {
  // socket.on('host-join', (data) => {
  //   console.log("HOST JOINEEED")
  //   console.log("MY DATAAAAA HOST-JOIN", data)
  //   socket.join(data.accessId)
  // })
  // socket.on('player-join', (data) => {
  //   console.log("PLAYER JOINEEEEEED")
    
  //   var myData = parseInt(data)
  //   console.log("MY DATAAAAA PLAYER-JOIN", myData)
  //   socket.join(myData)
  // })
  socket.on('start-quiz', (data) => {
    // console.log("MY DATAAAAA START-QUIZ", data)
    socket.broadcast.emit('quiz-started')
  })
  socket.on('join-quiz', (data) => {
    socket.broadcast.emit('join-quiz')
  })
  socket.on('end-question', (data) => {
    console.log('ENDEEEEEEEEED')
    socket.broadcast.emit('end-question')
  })
  socket.on('next-question', (data) => {
    console.log('NEXT QUESTIOOOOON')
    socket.broadcast.emit('next-question')
  })
  socket.on('end-quiz', (data) => {
    socket.broadcast.emit('end-quiz')
  })
  socket.on('answer-submit', (data) => {
    socket.broadcast.emit('answer-submit', {answer: data.answer, user: data.user})
  })
})



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
